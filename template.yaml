AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  notes-api

  Sample SAM Template for notes-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    MemorySize: 512
    Runtime: java17
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS,DELETE,PUT'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"
    # Variables:
    #   NOTES_TABLE: !Ref NotesTable

Resources:
  NoteTable:
    Type: AWS::DynamoDB::Table
    # DeletionPolicy: Retain
    Properties:
      TableName: notes-dev
      AttributeDefinitions:
        - AttributeName: 'note_id'
          AttributeType: 'S'
        - AttributeName: 'timestamp'
          AttributeType: 'N'
        - AttributeName: 'user_id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'user_id'
          KeyType: 'HASH'
        - AttributeName: 'timestamp'
          KeyType: 'RANGE'
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: 'note_id-index'
          KeySchema:
            - AttributeName: 'note_id'
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
            
        # Type: s

  CreateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: notes-api
      Handler: com.notesapp.services.CreateNote::createNote
      Policies: 
        - DynamoDBCrudPolicy:
           TableName: "notes-dev"
      Events:
        CreateNote:
          Type: Api
          Properties:
            Path: /note
            Method: post

  GetNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: notes-api
      Handler: com.notesapp.services.GetNote::getNote
      Policies: 
        - DynamoDBReadPolicy:
           TableName: "notes-dev"
      Events:
        CreateNote:
          Type: Api
          Properties:
            Path: /note/n/{note_id+}
            Method: get
  GetNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: notes-api
      Handler: com.notesapp.services.GetNotes::getNotes
      Policies: 
        - DynamoDBReadPolicy:
           TableName: "notes-dev"
      Events:
        CreateNote:
          Type: Api
          Properties:
            Path: /notes
            Method: get

  UpdateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: notes-api
      Handler: com.notesapp.services.UpdateNote::updateNote
      Policies: 
        - DynamoDBCrudPolicy:
           TableName: "notes-dev"
      Events:
        CreateNote:
          Type: Api
          Properties:
            Path: /note
            Method: put

  DeleteNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: notes-api
      Handler: com.notesapp.services.DeleteNote::deleteNote
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: "notes-dev"
      Events:
        CreateNote:
          Type: Api
          Properties:
            Path: /note/t/{timestamp}
            Method: delete

Outputs:
  CreateNoteApi:
    Description: "Endpoint for create orders function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/note"
  CreateNoteFunction:
    Description: "Create note function"
    Value : !GetAtt CreateNoteFunction.Arn
  GetNotesApi:
    Description: "Endpoint for get notes function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/notes"


# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
